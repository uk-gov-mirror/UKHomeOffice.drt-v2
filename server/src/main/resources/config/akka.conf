akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel: "INFO"
  loglevel: ${?ENV_LOG_LEVEL}
  jvm-exit-on-fatal-error = true
  extensions = [akka.persistence.Persistence]
  http {
    client.parsing.illegal-header-warnings = off
  }
  actor {
    serializers {
      protobuf = "actors.serializers.ProtoBufSerializer"
    }
    serialization-bindings {
      "server.protobuf.messages.CrunchState.CrunchDiffMessage" = protobuf
      "server.protobuf.messages.CrunchState.CrunchStateSnapshotMessage" = protobuf
      "server.protobuf.messages.CrunchState.DaysSnapshotMessage" = protobuf
      "server.protobuf.messages.CrunchState.CrunchMinutesMessage" = protobuf
      "server.protobuf.messages.ShiftMessage.ShiftsMessage" = protobuf
      "server.protobuf.messages.ShiftMessage.ShiftStateSnapshotMessage" = protobuf
      "server.protobuf.messages.ShiftMessage.ShiftMessage" = protobuf
      "server.protobuf.messages.FixedPointMessage.FixedPointsMessage" = protobuf
      "server.protobuf.messages.FixedPointMessage.FixedPointsStateSnapshotMessage" = protobuf
      "server.protobuf.messages.FixedPointMessage.FixedPointMessage" = protobuf
      "server.protobuf.messages.StaffMovementMessages.StaffMovementsMessage" = protobuf
      "server.protobuf.messages.StaffMovementMessages.StaffMovementsStateSnapshotMessage" = protobuf
      "server.protobuf.messages.StaffMovementMessages.StaffMovementMessage" = protobuf
      "server.protobuf.messages.StaffMovementMessages.RemoveStaffMovementMessage" = protobuf
      "server.protobuf.messages.FlightsMessage.FlightsDiffMessage" = protobuf
      "server.protobuf.messages.FlightsMessage.FlightStateSnapshotMessage" = protobuf
      "server.protobuf.messages.FlightsMessage.FeedStatusMessage" = protobuf
      "server.protobuf.messages.FlightsMessage.FeedStatusesMessage" = protobuf
      "server.protobuf.messages.VoyageManifest.VoyageManifestStateSnapshotMessage" = protobuf
      "server.protobuf.messages.VoyageManifest.VoyageManifestLatestFileNameMessage" = protobuf
      "server.protobuf.messages.VoyageManifest.VoyageManifestsMessage" = protobuf
      "server.protobuf.messages.VoyageManifest.VoyageManifestMessage" = protobuf
      "server.protobuf.messages.Alert.AlertSnapshotMessage" = protobuf
      "server.protobuf.messages.Alert.Alert" = protobuf
      "server.protobuf.messages.RegisteredArrivalMessage.RegisteredArrivalMessage" = protobuf
      "server.protobuf.messages.RegisteredArrivalMessage.RegisteredArrivalsMessage" = protobuf
      "server.protobuf.messages.TerminalQueuesSummary.TerminalQueuesSummaryMessage" = protobuf
      "server.protobuf.messages.FlightsSummary.FlightsSummaryMessage" = protobuf
      "server.protobuf.messages.CrunchState.CrunchMinutesMessage" = protobuf
      "server.protobuf.messages.CrunchState.StaffMinutesMessage" = protobuf
      "server.protobuf.messages.PaxMessage.PaxCountMessage" = protobuf
      "server.protobuf.messages.PaxMessage.OriginTerminalPaxCountsMessage" = protobuf
    }

  }
}

arrivals-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 4
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 1
}

workloads-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 4
  }
  throughput = 1
}

crunch-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 4
  }
  throughput = 1
}

staff-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 4
  }
  throughput = 1
}

simulation-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 4
  }
  throughput = 1
}

port-state-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 4
  }
  throughput = 1
}

aggregated-arrivals-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 4
  }
  throughput = 1
}
